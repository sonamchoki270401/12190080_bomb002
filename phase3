Set up the break points:
(gdb) break phase_3
Breakpoint 5 at 0x400f0d
(gdb) break explode_bomb
Breakpoint 6 at 0x401438
(gdb) run text.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/Desktop/Sonam Choki/Desktop/Assignment 1/bomb002/bomb
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32 //Solution for phase_2

That's number 2.  Keep going!
5 6 //test input

Breakpoint 5, 0x0000000000400f0d in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f0d <+0>:     sub    $0x18,%rsp
   0x0000000000400f11 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:    xor    %eax,%eax
   0x0000000000400f21 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:    mov    %rsp,%rdx
   0x0000000000400f29 <+28>:    mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt> //function that takes input
   0x0000000000400f33 <+38>:    cmp    $0x1,%eax //comparing 1 with result from input
   0x0000000000400f36 <+41>:    jg     0x400f3d <phase_3+48> //jump if %eax > 1 else explode bomb
   0x0000000000400f38 <+43>:    callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:    cmpl   $0x7,(%rsp) //comparing 7 with value of (%rsp)
   0x0000000000400f41 <+52>:    ja     0x400f9e <phase_3+145> // jump to bomb if above 7
   0x0000000000400f43 <+54>:    mov    (%rsp),%eax
   0x0000000000400f46 <+57>:    jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:    mov    $0x380,%eax
   0x0000000000400f52 <+69>:    jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:    mov    $0x0,%eax
   0x0000000000400f59 <+76>:    sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:    jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:    mov    $0x0,%eax
   0x0000000000400f65 <+88>:    add    $0x21e,%eax
   0x0000000000400f6a <+93>:    jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:    mov    $0x0,%eax
   0x0000000000400f71 <+100>:   sub    $0x34,%eax
   0x0000000000400f74 <+103>:   jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:   mov    $0x0,%eax
   0x0000000000400f7b <+110>:   add    $0x34,%eax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f7e <+113>:   jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:   mov    $0x0,%eax
   0x0000000000400f85 <+120>:   sub    $0x34,%eax
   0x0000000000400f88 <+123>:   jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:   mov    $0x0,%eax
   0x0000000000400f8f <+130>:   add    $0x34,%eax
   0x0000000000400f92 <+133>:   jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:   mov    $0x0,%eax
   0x0000000000400f99 <+140>:   sub    $0x34,%eax
   0x0000000000400f9c <+143>:   jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:   callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:   mov    $0x0,%eax
   0x0000000000400fa8 <+155>:   cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:   jg     0x400fb4 <phase_3+167>//jump if 0x5 > value of (%rsp)
   0x0000000000400fae <+161>:   cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:   je     0x400fb9 <phase_3+172> //jump if 0x4(%rsp) and %eax is equal 
   0x0000000000400fb4 <+167>:   callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:   mov    0x8(%rsp),%rax //compares 0x8(%rsp) with %rax 
   0x0000000000400fbe <+177>:   xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:   je     0x400fce <phase_3+193>
   0x0000000000400fc9 <+188>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:   add    $0x18,%rsp 
   0x0000000000400fd2 <+197>:   retq
End of assembler dump.

Lets move the pointer to <+14> to figure out what 0x4027a5 is:
(gdb) x/s 0x4027a5
0x4027a5:       "%d %d"

(gdb) disas
(gdb) u* 0x0000000000400f33
0x0000000000400f33 in phase_3 ()

Dump of assembler code for function phase_3:
 
   0x0000000000400f26 <+25>:    mov    %rsp,%rdx
   0x0000000000400f29 <+28>:    mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
=> 0x0000000000400f33 <+38>:    cmp    $0x1,%eax
   0x0000000000400f36 <+41>:    jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:    callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:    ja     0x400f9e <phase_3+145>

End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x4021f0            4202992
rcx            0x0                 0


In line <+38>, we will compare $0x1 and %eax. In line <+41>, jump if %eax > 1 else explode bomb. Since %eax is 2 and it is %eax > 1 then <+41> is executed and next execution is <+48>

(gdb) ni
0x0000000000400f36 in phase_3 ()
(gdb) ni
0x0000000000400f3d in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   
   0x0000000000400f33 <+38>:    cmp    $0x1,%eax
   0x0000000000400f36 <+41>:    jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:    callq  0x401438 <explode_bomb>
=> 0x0000000000400f3d <+48>:    cmpl   $0x7,(%rsp) // (%rsp) < 7
   0x0000000000400f41 <+52>:    ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:    mov    (%rsp),%eax
 
 In line <+48>, we will compare $0x7 and (%rsp). 

End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7ffffffee334      140737488282420
rsi            0x0                 0
rdi            0x7ffffffedce0      140737488280800
rbp            0x0                 0x0
rsp            0x7ffffffee330      0x7ffffffee330

Lets check the value in %rsp:
(gdb) x/d  0x7ffffffee330

0x7ffffffee330: 5
Since 0x7 > 5, we will skip <+52> then go to <+54>. Moreover, our first number is 5.
Let's find our second number.

(gdb) u* 0x0000000000400fa8
0x0000000000400fa8 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
  
   0x0000000000400fa3 <+150>:   mov    $0x0,%eax
=> 0x0000000000400fa8 <+155>:   cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:   jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:   cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:   je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:   callq  0x401438 <explode_bomb>

In line <+155>, we will compare  $0x5 and (%rsp).

End of assembler dump.
(gdb) i r
rax            0xffffffcc          4294967244
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7ffffffee334      140737488282420
rsi            0x0                 0
rdi            0x7ffffffedce0      140737488280800
rbp            0x0                 0x0
rsp            0x7ffffffee330      0x7ffffffee330

Let's check value in (%rsp);
(gdb) x/d  0x7ffffffee330
0x7ffffffee330: 5
(gdb) ni

0x0000000000400fac in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   
  
   0x0000000000400fa3 <+150>:   mov    $0x0,%eax
   0x0000000000400fa8 <+155>:   cmpl   $0x5,(%rsp)
=> 0x0000000000400fac <+159>:   jg     0x400fb4 <phase_3+167> //execute if 0x5 > (%rsp)
   0x0000000000400fae <+161>:   cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:   je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:   callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:   mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:   xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:   je     0x400fce <phase_3+193>
   0x0000000000400fc9 <+188>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:   add    $0x18,%rsp
   0x0000000000400fd2 <+197>:   retq
End of assembler dump.

Since value of (%rsp) is 5 so it's not greater than 0x5, line <+159> will be skip. Now, we will compare 0x4(%rsp) and %eax in line <+161>.

(gdb) ni

0x0000000000400fae in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
  
   0x0000000000400fac <+159>:   jg     0x400fb4 <phase_3+167>
=> 0x0000000000400fae <+161>:   cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:   je     0x400fb9 <phase_3+172> // jump if equal
   0x0000000000400fb4 <+167>:   callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:   mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:   xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:   je     0x400fce <phase_3+193>
   0x0000000000400fc9 <+188>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:   add    $0x18,%rsp
   0x0000000000400fd2 <+197>:   retq
End of assembler dump.

(gdb) i r
rax            0xffffffcc          4294967244
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7ffffffee334      140737488282420
rsi            0x0                 0
rdi            0x7ffffffedce0      140737488280800
rbp            0x0                 0x0
rsp            0x7ffffffee330      0x7ffffffee330
r8             0xffffffff          4294967295

Let's check the value of 0x4(%rsp):
(gdb) x/d 0x7ffffffee334
0x7ffffffee334: 6
(gdb) ni
0x0000000000400fb2 in phase_3 ()
(gdb) ni
0x0000000000400fb4 in phase_3 ()
(gdb) ni

The value in 0x4(%rsp)= 6 and value of %eax = 4294967244 is not equal. So, <+165> is skip and bomb will be explode. However, if we assume that our input 0x4(%rsp) = %eax where %eax = 4294967244 then we will execute line <+172> and execute. From this, we know that our second input should be 4294967244 so that further execution will be executed.

Since now we know the answers, we will delete the breakpoints.
Breakpoint 6, 0x0000000000401438 in explode_bomb ()
(gdb) delete
Delete all breakpoints? (y or n) y
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/c/Users/Sonam Dema/Desktop/Assignment 1/bomb002/bomb
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
5 4294967244 //Solution for phase_3
Halfway there!
