Dump of assembler code for function phase_5:
=> 0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi			//Format of input - " %d %d " 
   0x000000000040109c <+33>:	call   0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax			//compare the value of %eax with 1
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>		//jump greater- else explode bomb
   0x00000000004010a6 <+43>:	call   0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax			//move %rsp- first user input to eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax			//compare to see if the first user input is less than 15
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>		//if equal- explode bomb 
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx			
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx			
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax		//array[rax] -> eax
   0x00000000004010cf <+84>:	add    %eax,%ecx			// ecx i.e sum; ecx = eax + ecx 
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax			//itrate through the loop if eax != 15
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx			//edx i.e count; number of iteration it has occured
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>		//if the count is != 15 then explode bomb
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx			//compare the sum with the second user input
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>		//if sum != (4+rsp) then explode bomb
   0x00000000004010e8 <+109>:	call   0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	call   0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	ret   

End of assembler dump.
 
code for phase_5
int phase_5()
{
   int numArray[16] = {10, 2, 14, 7, 8, 12, 15, 11, 0, 4, 1, 13, 3, 9, 6, 5};
   int edx = 0;
   int eax = 0;
   int ecx = 0;

   char *cString = NULL;
   size_t len = 0;
   
   readOK = input here;
   if (readOK > 1) {
      
      q = (q & 0xf);
      if (q == 0xf)
         explode_bomb();
         
      eax = q;
      do {
         edx = (edx + 0x1);
         eax = numArray[eax]
         ecx = (ecx + eax);
      }while (eax != 0xf)

   }
   else {
      explode_bomb();
   }

   q = eax;
   if (edx != 15)
      explode_bomb();

   if (ecx == p)
      input pass
   else
      explode bomb
}

Solution
5 115
The first input should be an index of the array, with each element in that index acting as an index to another element in the array, and thus it will point to all elements in the array except the input that the user has given in the loop until the pointed element is 15, at which point it will sum all the pointed elements, which should equal the second user input. As a result, the answer is 5 115.
